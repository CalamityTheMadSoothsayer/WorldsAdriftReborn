// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product-service

#ifndef GOOGLE_PROTOBUF_INCLUDED_product_2dservice
#define GOOGLE_PROTOBUF_INCLUDED_product_2dservice

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_product_2dservice
PROTOBUF_NAMESPACE_OPEN
namespace internal {
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_product_2dservice {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
        PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
        PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
        PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_product_2dservice;
namespace WorldsAdriftRebornCoreSdk {
    class LocationOffsetUpdateOp;
    struct LocationOffsetUpdateOpDefaultTypeInternal;
    extern LocationOffsetUpdateOpDefaultTypeInternal _LocationOffsetUpdateOp_default_instance_;
    class Quaternion;
    struct QuaternionDefaultTypeInternal;
    extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
    class Vector3f;
    struct Vector3fDefaultTypeInternal;
    extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
}  // namespace WorldsAdriftRebornCoreSdk
PROTOBUF_NAMESPACE_OPEN
template<> ::WorldsAdriftRebornCoreSdk::LocationOffsetUpdateOp* Arena::CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::LocationOffsetUpdateOp>(Arena*);
template<> ::WorldsAdriftRebornCoreSdk::Quaternion* Arena::CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::Quaternion>(Arena*);
template<> ::WorldsAdriftRebornCoreSdk::Vector3f* Arena::CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::Vector3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WorldsAdriftRebornCoreSdk {

    // ===================================================================

    class Vector3f final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldsAdriftRebornCoreSdk.Vector3f) */ {
    public:
        inline Vector3f() : Vector3f(nullptr) {}
        ~Vector3f() override;
        explicit constexpr Vector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        Vector3f(const Vector3f& from);
        Vector3f(Vector3f&& from) noexcept
            : Vector3f() {
            *this = ::std::move(from);
        }

        inline Vector3f& operator=(const Vector3f& from) {
            CopyFrom(from);
            return *this;
        }
        inline Vector3f& operator=(Vector3f&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            }
            else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const Vector3f& default_instance() {
            return *internal_default_instance();
        }
        static inline const Vector3f* internal_default_instance() {
            return reinterpret_cast<const Vector3f*>(
                &_Vector3f_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(Vector3f& a, Vector3f& b) {
            a.Swap(&b);
        }
        inline void Swap(Vector3f* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
            }
        void UnsafeArenaSwap(Vector3f * other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena * arena = nullptr) const final {
            return CreateMaybeMessage<Vector3f>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const Vector3f & from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const Vector3f & from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message * to, const ::PROTOBUF_NAMESPACE_ID::Message & from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Vector3f * other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "WorldsAdriftRebornCoreSdk.Vector3f";
        }
    protected:
        explicit Vector3f(::PROTOBUF_NAMESPACE_ID::Arena * arena,
            bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena * arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kZFieldNumber = 3,
        };
        // float x = 1;
        void clear_x();
        float x() const;
        void set_x(float value);
    private:
        float _internal_x() const;
        void _internal_set_x(float value);
    public:

        // float y = 2;
        void clear_y();
        float y() const;
        void set_y(float value);
    private:
        float _internal_y() const;
        void _internal_set_y(float value);
    public:

        // float z = 3;
        void clear_z();
        float z() const;
        void set_z(float value);
    private:
        float _internal_z() const;
        void _internal_set_z(float value);
    public:

        // @@protoc_insertion_point(class_scope:WorldsAdriftRebornCoreSdk.Vector3f)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        float x_;
        float y_;
        float z_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_product_2dservice;
        };
    // -------------------------------------------------------------------

    class Quaternion final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldsAdriftRebornCoreSdk.Quaternion) */ {
    public:
        inline Quaternion() : Quaternion(nullptr) {}
        ~Quaternion() override;
        explicit constexpr Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        Quaternion(const Quaternion& from);
        Quaternion(Quaternion&& from) noexcept
            : Quaternion() {
            *this = ::std::move(from);
        }

        inline Quaternion& operator=(const Quaternion& from) {
            CopyFrom(from);
            return *this;
        }
        inline Quaternion& operator=(Quaternion&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            }
            else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const Quaternion& default_instance() {
            return *internal_default_instance();
        }
        static inline const Quaternion* internal_default_instance() {
            return reinterpret_cast<const Quaternion*>(
                &_Quaternion_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(Quaternion& a, Quaternion& b) {
            a.Swap(&b);
        }
        inline void Swap(Quaternion* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
            }
        void UnsafeArenaSwap(Quaternion * other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena * arena = nullptr) const final {
            return CreateMaybeMessage<Quaternion>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const Quaternion & from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const Quaternion & from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message * to, const ::PROTOBUF_NAMESPACE_ID::Message & from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Quaternion * other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "WorldsAdriftRebornCoreSdk.Quaternion";
        }
    protected:
        explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena * arena,
            bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena * arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kWFieldNumber = 1,
            kXFieldNumber = 2,
            kYFieldNumber = 3,
            kZFieldNumber = 4,
        };
        // float w = 1;
        void clear_w();
        float w() const;
        void set_w(float value);
    private:
        float _internal_w() const;
        void _internal_set_w(float value);
    public:

        // float x = 2;
        void clear_x();
        float x() const;
        void set_x(float value);
    private:
        float _internal_x() const;
        void _internal_set_x(float value);
    public:

        // float y = 3;
        void clear_y();
        float y() const;
        void set_y(float value);
    private:
        float _internal_y() const;
        void _internal_set_y(float value);
    public:

        // float z = 4;
        void clear_z();
        float z() const;
        void set_z(float value);
    private:
        float _internal_z() const;
        void _internal_set_z(float value);
    public:

        // @@protoc_insertion_point(class_scope:WorldsAdriftRebornCoreSdk.Quaternion)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        float w_;
        float x_;
        float y_;
        float z_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_product_2dservice;
        };
    // -------------------------------------------------------------------

    class LocationOffsetUpdateOp final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp) */ {
    public:
        inline LocationOffsetUpdateOp() : LocationOffsetUpdateOp(nullptr) {}
        ~LocationOffsetUpdateOp() override;
        explicit constexpr LocationOffsetUpdateOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        LocationOffsetUpdateOp(const LocationOffsetUpdateOp& from);
        LocationOffsetUpdateOp(LocationOffsetUpdateOp&& from) noexcept
            : LocationOffsetUpdateOp() {
            *this = ::std::move(from);
        }

        inline LocationOffsetUpdateOp& operator=(const LocationOffsetUpdateOp& from) {
            CopyFrom(from);
            return *this;
        }
        inline LocationOffsetUpdateOp& operator=(LocationOffsetUpdateOp&& from) noexcept {
            if (this == &from) return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                ) {
                InternalSwap(&from);
            }
            else {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
            return default_instance().GetMetadata().reflection;
        }
        static const LocationOffsetUpdateOp& default_instance() {
            return *internal_default_instance();
        }
        static inline const LocationOffsetUpdateOp* internal_default_instance() {
            return reinterpret_cast<const LocationOffsetUpdateOp*>(
                &_LocationOffsetUpdateOp_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(LocationOffsetUpdateOp& a, LocationOffsetUpdateOp& b) {
            a.Swap(&b);
        }
        inline void Swap(LocationOffsetUpdateOp* other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
            }
        void UnsafeArenaSwap(LocationOffsetUpdateOp * other) {
            if (other == this) return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        LocationOffsetUpdateOp* New(::PROTOBUF_NAMESPACE_ID::Arena * arena = nullptr) const final {
            return CreateMaybeMessage<LocationOffsetUpdateOp>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const LocationOffsetUpdateOp & from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const LocationOffsetUpdateOp & from);
    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message * to, const ::PROTOBUF_NAMESPACE_ID::Message & from);
    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(LocationOffsetUpdateOp * other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
            return "WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp";
        }
    protected:
        explicit LocationOffsetUpdateOp(::PROTOBUF_NAMESPACE_ID::Arena * arena,
            bool is_message_owned = false);
    private:
        static void ArenaDtor(void* object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena * arena);
    public:

        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int {
            kPositionFieldNumber = 2,
            kRotationFieldNumber = 3,
            kEntityIdFieldNumber = 1,
        };
        // .WorldsAdriftRebornCoreSdk.Vector3f position = 2;
        bool has_position() const;
    private:
        bool _internal_has_position() const;
    public:
        void clear_position();
        const ::WorldsAdriftRebornCoreSdk::Vector3f& position() const;
        PROTOBUF_NODISCARD::WorldsAdriftRebornCoreSdk::Vector3f* release_position();
        ::WorldsAdriftRebornCoreSdk::Vector3f* mutable_position();
        void set_allocated_position(::WorldsAdriftRebornCoreSdk::Vector3f * position);
    private:
        const ::WorldsAdriftRebornCoreSdk::Vector3f& _internal_position() const;
        ::WorldsAdriftRebornCoreSdk::Vector3f* _internal_mutable_position();
    public:
        void unsafe_arena_set_allocated_position(
            ::WorldsAdriftRebornCoreSdk::Vector3f * position);
        ::WorldsAdriftRebornCoreSdk::Vector3f* unsafe_arena_release_position();

        // .WorldsAdriftRebornCoreSdk.Quaternion rotation = 3;
        bool has_rotation() const;
    private:
        bool _internal_has_rotation() const;
    public:
        void clear_rotation();
        const ::WorldsAdriftRebornCoreSdk::Quaternion& rotation() const;
        PROTOBUF_NODISCARD::WorldsAdriftRebornCoreSdk::Quaternion* release_rotation();
        ::WorldsAdriftRebornCoreSdk::Quaternion* mutable_rotation();
        void set_allocated_rotation(::WorldsAdriftRebornCoreSdk::Quaternion * rotation);
    private:
        const ::WorldsAdriftRebornCoreSdk::Quaternion& _internal_rotation() const;
        ::WorldsAdriftRebornCoreSdk::Quaternion* _internal_mutable_rotation();
    public:
        void unsafe_arena_set_allocated_rotation(
            ::WorldsAdriftRebornCoreSdk::Quaternion * rotation);
        ::WorldsAdriftRebornCoreSdk::Quaternion* unsafe_arena_release_rotation();

        // int64 entity_id = 1;
        void clear_entity_id();
        int64_t entity_id() const;
        void set_entity_id(int64_t value);
    private:
        int64_t _internal_entity_id() const;
        void _internal_set_entity_id(int64_t value);
    public:

        // @@protoc_insertion_point(class_scope:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp)
    private:
        class _Internal;

        template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::WorldsAdriftRebornCoreSdk::Vector3f* position_;
        ::WorldsAdriftRebornCoreSdk::Quaternion* rotation_;
        int64_t entity_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_product_2dservice;
        };
    // ===================================================================


    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3f

// float x = 1;
    inline void Vector3f::clear_x() {
        x_ = 0;
    }
    inline float Vector3f::_internal_x() const {
        return x_;
    }
    inline float Vector3f::x() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Vector3f.x)
        return _internal_x();
    }
    inline void Vector3f::_internal_set_x(float value) {

        x_ = value;
    }
    inline void Vector3f::set_x(float value) {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Vector3f.x)
    }

    // float y = 2;
    inline void Vector3f::clear_y() {
        y_ = 0;
    }
    inline float Vector3f::_internal_y() const {
        return y_;
    }
    inline float Vector3f::y() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Vector3f.y)
        return _internal_y();
    }
    inline void Vector3f::_internal_set_y(float value) {

        y_ = value;
    }
    inline void Vector3f::set_y(float value) {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Vector3f.y)
    }

    // float z = 3;
    inline void Vector3f::clear_z() {
        z_ = 0;
    }
    inline float Vector3f::_internal_z() const {
        return z_;
    }
    inline float Vector3f::z() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Vector3f.z)
        return _internal_z();
    }
    inline void Vector3f::_internal_set_z(float value) {

        z_ = value;
    }
    inline void Vector3f::set_z(float value) {
        _internal_set_z(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Vector3f.z)
    }

    // -------------------------------------------------------------------

    // Quaternion

    // float w = 1;
    inline void Quaternion::clear_w() {
        w_ = 0;
    }
    inline float Quaternion::_internal_w() const {
        return w_;
    }
    inline float Quaternion::w() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Quaternion.w)
        return _internal_w();
    }
    inline void Quaternion::_internal_set_w(float value) {

        w_ = value;
    }
    inline void Quaternion::set_w(float value) {
        _internal_set_w(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Quaternion.w)
    }

    // float x = 2;
    inline void Quaternion::clear_x() {
        x_ = 0;
    }
    inline float Quaternion::_internal_x() const {
        return x_;
    }
    inline float Quaternion::x() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Quaternion.x)
        return _internal_x();
    }
    inline void Quaternion::_internal_set_x(float value) {

        x_ = value;
    }
    inline void Quaternion::set_x(float value) {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Quaternion.x)
    }

    // float y = 3;
    inline void Quaternion::clear_y() {
        y_ = 0;
    }
    inline float Quaternion::_internal_y() const {
        return y_;
    }
    inline float Quaternion::y() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Quaternion.y)
        return _internal_y();
    }
    inline void Quaternion::_internal_set_y(float value) {

        y_ = value;
    }
    inline void Quaternion::set_y(float value) {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Quaternion.y)
    }

    // float z = 4;
    inline void Quaternion::clear_z() {
        z_ = 0;
    }
    inline float Quaternion::_internal_z() const {
        return z_;
    }
    inline float Quaternion::z() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.Quaternion.z)
        return _internal_z();
    }
    inline void Quaternion::_internal_set_z(float value) {

        z_ = value;
    }
    inline void Quaternion::set_z(float value) {
        _internal_set_z(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.Quaternion.z)
    }

    // -------------------------------------------------------------------

    // LocationOffsetUpdateOp

    // int64 entity_id = 1;
    inline void LocationOffsetUpdateOp::clear_entity_id() {
        entity_id_ = int64_t{ 0 };
    }
    inline int64_t LocationOffsetUpdateOp::_internal_entity_id() const {
        return entity_id_;
    }
    inline int64_t LocationOffsetUpdateOp::entity_id() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.entity_id)
        return _internal_entity_id();
    }
    inline void LocationOffsetUpdateOp::_internal_set_entity_id(int64_t value) {

        entity_id_ = value;
    }
    inline void LocationOffsetUpdateOp::set_entity_id(int64_t value) {
        _internal_set_entity_id(value);
        // @@protoc_insertion_point(field_set:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.entity_id)
    }

    // .WorldsAdriftRebornCoreSdk.Vector3f position = 2;
    inline bool LocationOffsetUpdateOp::_internal_has_position() const {
        return this != internal_default_instance() && position_ != nullptr;
    }
    inline bool LocationOffsetUpdateOp::has_position() const {
        return _internal_has_position();
    }
    inline void LocationOffsetUpdateOp::clear_position() {
        if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
            delete position_;
        }
        position_ = nullptr;
    }
    inline const ::WorldsAdriftRebornCoreSdk::Vector3f& LocationOffsetUpdateOp::_internal_position() const {
        const ::WorldsAdriftRebornCoreSdk::Vector3f* p = position_;
        return p != nullptr ? *p : reinterpret_cast<const ::WorldsAdriftRebornCoreSdk::Vector3f&>(
            ::WorldsAdriftRebornCoreSdk::_Vector3f_default_instance_);
    }
    inline const ::WorldsAdriftRebornCoreSdk::Vector3f& LocationOffsetUpdateOp::position() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.position)
        return _internal_position();
    }
    inline void LocationOffsetUpdateOp::unsafe_arena_set_allocated_position(
        ::WorldsAdriftRebornCoreSdk::Vector3f* position) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
        }
        position_ = position;
        if (position) {

        }
        else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.position)
    }
    inline ::WorldsAdriftRebornCoreSdk::Vector3f* LocationOffsetUpdateOp::release_position() {

        ::WorldsAdriftRebornCoreSdk::Vector3f* temp = position_;
        position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::WorldsAdriftRebornCoreSdk::Vector3f* LocationOffsetUpdateOp::unsafe_arena_release_position() {
        // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.position)

        ::WorldsAdriftRebornCoreSdk::Vector3f* temp = position_;
        position_ = nullptr;
        return temp;
    }
    inline ::WorldsAdriftRebornCoreSdk::Vector3f* LocationOffsetUpdateOp::_internal_mutable_position() {

        if (position_ == nullptr) {
            auto* p = CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::Vector3f>(GetArenaForAllocation());
            position_ = p;
        }
        return position_;
    }
    inline ::WorldsAdriftRebornCoreSdk::Vector3f* LocationOffsetUpdateOp::mutable_position() {
        ::WorldsAdriftRebornCoreSdk::Vector3f* _msg = _internal_mutable_position();
        // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.position)
        return _msg;
    }
    inline void LocationOffsetUpdateOp::set_allocated_position(::WorldsAdriftRebornCoreSdk::Vector3f* position) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete position_;
        }
        if (position) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WorldsAdriftRebornCoreSdk::Vector3f>::GetOwningArena(position);
            if (message_arena != submessage_arena) {
                position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, position, submessage_arena);
            }

        }
        else {

        }
        position_ = position;
        // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.position)
    }

    // .WorldsAdriftRebornCoreSdk.Quaternion rotation = 3;
    inline bool LocationOffsetUpdateOp::_internal_has_rotation() const {
        return this != internal_default_instance() && rotation_ != nullptr;
    }
    inline bool LocationOffsetUpdateOp::has_rotation() const {
        return _internal_has_rotation();
    }
    inline void LocationOffsetUpdateOp::clear_rotation() {
        if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
            delete rotation_;
        }
        rotation_ = nullptr;
    }
    inline const ::WorldsAdriftRebornCoreSdk::Quaternion& LocationOffsetUpdateOp::_internal_rotation() const {
        const ::WorldsAdriftRebornCoreSdk::Quaternion* p = rotation_;
        return p != nullptr ? *p : reinterpret_cast<const ::WorldsAdriftRebornCoreSdk::Quaternion&>(
            ::WorldsAdriftRebornCoreSdk::_Quaternion_default_instance_);
    }
    inline const ::WorldsAdriftRebornCoreSdk::Quaternion& LocationOffsetUpdateOp::rotation() const {
        // @@protoc_insertion_point(field_get:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.rotation)
        return _internal_rotation();
    }
    inline void LocationOffsetUpdateOp::unsafe_arena_set_allocated_rotation(
        ::WorldsAdriftRebornCoreSdk::Quaternion* rotation) {
        if (GetArenaForAllocation() == nullptr) {
            delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
        }
        rotation_ = rotation;
        if (rotation) {

        }
        else {

        }
        // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.rotation)
    }
    inline ::WorldsAdriftRebornCoreSdk::Quaternion* LocationOffsetUpdateOp::release_rotation() {

        ::WorldsAdriftRebornCoreSdk::Quaternion* temp = rotation_;
        rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
        auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
        return temp;
    }
    inline ::WorldsAdriftRebornCoreSdk::Quaternion* LocationOffsetUpdateOp::unsafe_arena_release_rotation() {
        // @@protoc_insertion_point(field_release:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.rotation)

        ::WorldsAdriftRebornCoreSdk::Quaternion* temp = rotation_;
        rotation_ = nullptr;
        return temp;
    }
    inline ::WorldsAdriftRebornCoreSdk::Quaternion* LocationOffsetUpdateOp::_internal_mutable_rotation() {

        if (rotation_ == nullptr) {
            auto* p = CreateMaybeMessage<::WorldsAdriftRebornCoreSdk::Quaternion>(GetArenaForAllocation());
            rotation_ = p;
        }
        return rotation_;
    }
    inline ::WorldsAdriftRebornCoreSdk::Quaternion* LocationOffsetUpdateOp::mutable_rotation() {
        ::WorldsAdriftRebornCoreSdk::Quaternion* _msg = _internal_mutable_rotation();
        // @@protoc_insertion_point(field_mutable:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.rotation)
        return _msg;
    }
    inline void LocationOffsetUpdateOp::set_allocated_rotation(::WorldsAdriftRebornCoreSdk::Quaternion* rotation) {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        if (message_arena == nullptr) {
            delete rotation_;
        }
        if (rotation) {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WorldsAdriftRebornCoreSdk::Quaternion>::GetOwningArena(rotation);
            if (message_arena != submessage_arena) {
                rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, rotation, submessage_arena);
            }

        }
        else {

        }
        rotation_ = rotation;
        // @@protoc_insertion_point(field_set_allocated:WorldsAdriftRebornCoreSdk.LocationOffsetUpdateOp.rotation)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------


    // @@protoc_insertion_point(namespace_scope)

    }  // namespace WorldsAdriftRebornCoreSdk

    // @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_product_2dservice
